{"version":3,"file":"default-node_modules_angular_common_fesm2020_http_mjs.js","mappings":"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","sources":["./node_modules/rxjs/src/internal/observable/of.ts","./node_modules/rxjs/src/internal/operators/concatMap.ts","./node_modules/rxjs/src/internal/operators/filter.ts","./node_modules/rxjs/src/internal/operators/mergeInternals.ts","./node_modules/rxjs/src/internal/operators/mergeMap.ts","./node_modules/rxjs/src/internal/util/args.ts","../../packages/common/http/src/backend.ts","../../packages/common/http/src/headers.ts","../../packages/common/http/src/params.ts","../../packages/common/http/src/context.ts","../../packages/common/http/src/request.ts","../../packages/common/http/src/response.ts","../../packages/common/http/src/client.ts","../../packages/common/http/src/interceptor.ts","../../packages/common/http/src/jsonp.ts","../../packages/common/http/src/xhr.ts","../../packages/common/http/src/xsrf.ts","../../packages/common/http/src/provider.ts","../../packages/common/http/src/module.ts","../../packages/common/http/public_api.ts","../../packages/common/http/index.ts","../../packages/common/http/http.ts"],"sourcesContent":["import { SchedulerLike, ValueFromArray } from '../types';\nimport { Observable } from '../Observable';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\n\n// Devs are more likely to pass null or undefined than they are a scheduler\n// without accompanying values. To make things easier for (naughty) devs who\n// use the `strictNullChecks: false` TypeScript compiler option, these\n// overloads with explicit null and undefined values are included.\n\nexport function of(value: null): Observable<null>;\nexport function of(value: undefined): Observable<undefined>;\n\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function of(scheduler: SchedulerLike): Observable<never>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function of<A extends readonly unknown[]>(...valuesAndScheduler: [...A, SchedulerLike]): Observable<ValueFromArray<A>>;\n\nexport function of(): Observable<never>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function of<T>(): Observable<T>;\nexport function of<T>(value: T): Observable<T>;\nexport function of<A extends readonly unknown[]>(...values: A): Observable<ValueFromArray<A>>;\n\n/**\n * Converts the arguments to an observable sequence.\n *\n * <span class=\"informal\">Each argument becomes a `next` notification.</span>\n *\n * ![](of.png)\n *\n * Unlike {@link from}, it does not do any flattening and emits each argument in whole\n * as a separate `next` notification.\n *\n * ## Examples\n *\n * Emit the values `10, 20, 30`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of(10, 20, 30)\n *   .subscribe({\n *     next: value => console.log('next:', value),\n *     error: err => console.log('error:', err),\n *     complete: () => console.log('the end'),\n *   });\n *\n * // Outputs\n * // next: 10\n * // next: 20\n * // next: 30\n * // the end\n * ```\n *\n * Emit the array `[1, 2, 3]`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of([1, 2, 3])\n *   .subscribe({\n *     next: value => console.log('next:', value),\n *     error: err => console.log('error:', err),\n *     complete: () => console.log('the end'),\n *   });\n *\n * // Outputs\n * // next: [1, 2, 3]\n * // the end\n * ```\n *\n * @see {@link from}\n * @see {@link range}\n *\n * @param {...T} values A comma separated list of arguments you want to be emitted\n * @return {Observable} An Observable that emits the arguments\n * described above and then completes.\n */\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  const scheduler = popScheduler(args);\n  return from(args as T[], scheduler);\n}\n","import { mergeMap } from './mergeMap';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function concatMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function concatMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * ![](concatMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n *\n * For each click event, tick every second from 0 to 3, with no concurrency\n *\n * ```ts\n * import { fromEvent, concatMap, interval, take } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   concatMap(ev => interval(1000).pipe(take(4)))\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and taking\n * values from each projected inner Observable sequentially.\n */\nexport function concatMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);\n}\n","import { OperatorFunction, MonoTypeOperatorFunction, TruthyTypesOf } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function filter<T, S extends T, A>(predicate: (this: A, value: T, index: number) => value is S, thisArg: A): OperatorFunction<T, S>;\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\nexport function filter<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function filter<T, A>(predicate: (this: A, value: T, index: number) => boolean, thisArg: A): MonoTypeOperatorFunction<T>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * ![](filter.png)\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * ## Example\n *\n * Emit only click events whose target was a DIV element\n *\n * ```ts\n * import { fromEvent, filter } from 'rxjs';\n *\n * const div = document.createElement('div');\n * div.style.cssText = 'width: 200px; height: 200px; background: #09c;';\n * document.body.appendChild(div);\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksOnDivs = clicks.pipe(filter(ev => (<HTMLElement>ev.target).tagName === 'DIV'));\n * clicksOnDivs.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param thisArg An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return A function that returns an Observable that emits items from the\n * source Observable that satisfy the specified `predicate`.\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean, thisArg?: any): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    // An index passed to our predicate function on each call.\n    let index = 0;\n\n    // Subscribe to the source, all errors and completions are\n    // forwarded to the consumer.\n    source.subscribe(\n      // Call the predicate with the appropriate `this` context,\n      // if the predicate returns `true`, then send the value\n      // to the consumer.\n      createOperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value))\n    );\n  });\n}\n","import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subscriber } from '../Subscriber';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * A process embodying the general \"merge\" strategy. This is used in\n * `mergeMap` and `mergeScan` because the logic is otherwise nearly identical.\n * @param source The original source observable\n * @param subscriber The consumer subscriber\n * @param project The projection function to get our inner sources\n * @param concurrent The number of concurrent inner subscriptions\n * @param onBeforeNext Additional logic to apply before nexting to our consumer\n * @param expand If `true` this will perform an \"expand\" strategy, which differs only\n * in that it recurses, and the inner subscription must be schedule-able.\n * @param innerSubScheduler A scheduler to use to schedule inner subscriptions,\n * this is to support the expand strategy, mostly, and should be deprecated\n */\nexport function mergeInternals<T, R>(\n  source: Observable<T>,\n  subscriber: Subscriber<R>,\n  project: (value: T, index: number) => ObservableInput<R>,\n  concurrent: number,\n  onBeforeNext?: (innerValue: R) => void,\n  expand?: boolean,\n  innerSubScheduler?: SchedulerLike,\n  additionalFinalizer?: () => void\n) {\n  // Buffered values, in the event of going over our concurrency limit\n  const buffer: T[] = [];\n  // The number of active inner subscriptions.\n  let active = 0;\n  // An index to pass to our accumulator function\n  let index = 0;\n  // Whether or not the outer source has completed.\n  let isComplete = false;\n\n  /**\n   * Checks to see if we can complete our result or not.\n   */\n  const checkComplete = () => {\n    // If the outer has completed, and nothing is left in the buffer,\n    // and we don't have any active inner subscriptions, then we can\n    // Emit the state and complete.\n    if (isComplete && !buffer.length && !active) {\n      subscriber.complete();\n    }\n  };\n\n  // If we're under our concurrency limit, just start the inner subscription, otherwise buffer and wait.\n  const outerNext = (value: T) => (active < concurrent ? doInnerSub(value) : buffer.push(value));\n\n  const doInnerSub = (value: T) => {\n    // If we're expanding, we need to emit the outer values and the inner values\n    // as the inners will \"become outers\" in a way as they are recursively fed\n    // back to the projection mechanism.\n    expand && subscriber.next(value as any);\n\n    // Increment the number of active subscriptions so we can track it\n    // against our concurrency limit later.\n    active++;\n\n    // A flag used to show that the inner observable completed.\n    // This is checked during finalization to see if we should\n    // move to the next item in the buffer, if there is on.\n    let innerComplete = false;\n\n    // Start our inner subscription.\n    innerFrom(project(value, index++)).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (innerValue) => {\n          // `mergeScan` has additional handling here. For example\n          // taking the inner value and updating state.\n          onBeforeNext?.(innerValue);\n\n          if (expand) {\n            // If we're expanding, then just recurse back to our outer\n            // handler. It will emit the value first thing.\n            outerNext(innerValue as any);\n          } else {\n            // Otherwise, emit the inner value.\n            subscriber.next(innerValue);\n          }\n        },\n        () => {\n          // Flag that we have completed, so we know to check the buffer\n          // during finalization.\n          innerComplete = true;\n        },\n        // Errors are passed to the destination.\n        undefined,\n        () => {\n          // During finalization, if the inner completed (it wasn't errored or\n          // cancelled), then we want to try the next item in the buffer if\n          // there is one.\n          if (innerComplete) {\n            // We have to wrap this in a try/catch because it happens during\n            // finalization, possibly asynchronously, and we want to pass\n            // any errors that happen (like in a projection function) to\n            // the outer Subscriber.\n            try {\n              // INNER SOURCE COMPLETE\n              // Decrement the active count to ensure that the next time\n              // we try to call `doInnerSub`, the number is accurate.\n              active--;\n              // If we have more values in the buffer, try to process those\n              // Note that this call will increment `active` ahead of the\n              // next conditional, if there were any more inner subscriptions\n              // to start.\n              while (buffer.length && active < concurrent) {\n                const bufferedValue = buffer.shift()!;\n                // Particularly for `expand`, we need to check to see if a scheduler was provided\n                // for when we want to start our inner subscription. Otherwise, we just start\n                // are next inner subscription.\n                if (innerSubScheduler) {\n                  executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));\n                } else {\n                  doInnerSub(bufferedValue);\n                }\n              }\n              // Check to see if we can complete, and complete if so.\n              checkComplete();\n            } catch (err) {\n              subscriber.error(err);\n            }\n          }\n        }\n      )\n    );\n  };\n\n  // Subscribe to our source observable.\n  source.subscribe(\n    createOperatorSubscriber(subscriber, outerNext, () => {\n      // Outer completed, make a note of it, and check to see if we can complete everything.\n      isComplete = true;\n      checkComplete();\n    })\n  );\n\n  // Additional finalization (for when the destination is torn down).\n  // Other finalization is added implicitly via subscription above.\n  return () => {\n    additionalFinalizer?.();\n  };\n}\n","import { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\n  concurrent?: number\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n *\n * Map and flatten each letter to an Observable ticking every 1 second\n *\n * ```ts\n * import { of, mergeMap, interval, map } from 'rxjs';\n *\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x + i)))\n * );\n *\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a, b, c every second with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and merging\n * the results of the Observables obtained from this transformation.\n */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Infinity\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  if (isFunction(resultSelector)) {\n    // DEPRECATED PATH\n    return mergeMap((a, i) => map((b: any, ii: number) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\n}\n","import { SchedulerLike } from '../types';\nimport { isFunction } from './isFunction';\nimport { isScheduler } from './isScheduler';\n\nfunction last<T>(arr: T[]): T | undefined {\n  return arr[arr.length - 1];\n}\n\nexport function popResultSelector(args: any[]): ((...args: unknown[]) => unknown) | undefined {\n  return isFunction(last(args)) ? args.pop() : undefined;\n}\n\nexport function popScheduler(args: any[]): SchedulerLike | undefined {\n  return isScheduler(last(args)) ? args.pop() : undefined;\n}\n\nexport function popNumber(args: any[], defaultValue: number): number {\n  return typeof last(args) === 'number' ? args.pop()! : defaultValue;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\n\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nexport abstract class HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nexport abstract class HttpBackend implements HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ninterface Update {\n  name: string;\n  value?: string|string[];\n  op: 'a'|'s'|'d';\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nexport class HttpHeaders {\n  /**\n   * Internal map of lowercase header names to values.\n   */\n  // TODO(issue/24571): remove '!'.\n  private headers!: Map<string, string[]>;\n\n\n  /**\n   * Internal map of lowercased header names to the normalized\n   * form of the name (the form seen first).\n   */\n  private normalizedNames: Map<string, string> = new Map();\n\n  /**\n   * Complete the lazy initialization of this object (needed before reading).\n   */\n  private lazyInit!: HttpHeaders|Function|null;\n\n  /**\n   * Queued updates to be materialized the next initialization.\n   */\n  private lazyUpdate: Update[]|null = null;\n\n  /**  Constructs a new HTTP header object with the given values.*/\n\n  constructor(headers?: string|{[name: string]: string | string[]}) {\n    if (!headers) {\n      this.headers = new Map<string, string[]>();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        headers.split('\\n').forEach(line => {\n          const index = line.indexOf(':');\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const key = name.toLowerCase();\n            const value = line.slice(index + 1).trim();\n            this.maybeSetNormalizedName(name, key);\n            if (this.headers.has(key)) {\n              this.headers.get(key)!.push(value);\n            } else {\n              this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else {\n      this.lazyInit = () => {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          assertValidHeaders(headers);\n        }\n        this.headers = new Map<string, string[]>();\n        Object.keys(headers).forEach(name => {\n          let values: string|string[] = headers[name];\n          const key = name.toLowerCase();\n          if (typeof values === 'string') {\n            values = [values];\n          }\n          if (values.length > 0) {\n            this.headers.set(key, values);\n            this.maybeSetNormalizedName(name, key);\n          }\n        });\n      };\n    }\n  }\n\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n  has(name: string): boolean {\n    this.init();\n\n    return this.headers.has(name.toLowerCase());\n  }\n\n  /**\n   * Retrieves the first value of a given header.\n   *\n   * @param name The header name.\n   *\n   * @returns The value string if the header exists, null otherwise\n   */\n  get(name: string): string|null {\n    this.init();\n\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Retrieves the names of the headers.\n   *\n   * @returns A list of header names.\n   */\n  keys(): string[] {\n    this.init();\n\n    return Array.from(this.normalizedNames.values());\n  }\n\n  /**\n   * Retrieves a list of values for a given header.\n   *\n   * @param name The header name from which to retrieve values.\n   *\n   * @returns A string of values if the header exists, null otherwise.\n   */\n  getAll(name: string): string[]|null {\n    this.init();\n\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n\n  /**\n   * Appends a new value to the existing set of values for a header\n   * and returns them in a clone of the original instance.\n   *\n   * @param name The header name for which to append the values.\n   * @param value The value to append.\n   *\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\n   */\n\n  append(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'a'});\n  }\n  /**\n   * Sets or modifies a value for a given header in a clone of the original instance.\n   * If the header already exists, its value is replaced with the given value\n   * in the returned object.\n   *\n   * @param name The header name.\n   * @param value The value or values to set or override for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the newly set header value.\n   */\n  set(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 's'});\n  }\n  /**\n   * Deletes values for a given header in a clone of the original instance.\n   *\n   * @param name The header name.\n   * @param value The value or values to delete for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the given value deleted.\n   */\n  delete(name: string, value?: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'd'});\n  }\n\n  private maybeSetNormalizedName(name: string, lcName: string): void {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n\n  private init(): void {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n\n  private copyFrom(other: HttpHeaders) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, other.headers.get(key)!);\n      this.normalizedNames.set(key, other.normalizedNames.get(key)!);\n    });\n  }\n\n  private clone(update: Update): HttpHeaders {\n    const clone = new HttpHeaders();\n    clone.lazyInit =\n        (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n\n  private applyUpdate(update: Update): void {\n    const key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value!;\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        const toDelete = update.value as string | undefined;\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  forEach(fn: (name: string, values: string[]) => void) {\n    this.init();\n    Array.from(this.normalizedNames.keys())\n        .forEach(key => fn(this.normalizedNames.get(key)!, this.headers.get(key)!));\n  }\n}\n\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers: Record<string, unknown>):\n    asserts headers is Record<string, string|string[]> {\n  for (const [key, value] of Object.entries(headers)) {\n    if (typeof value !== 'string' && !Array.isArray(value)) {\n      throw new Error(\n          `Unexpected value of the \\`${key}\\` header provided. ` +\n          `Expecting either a string or an array, but got: \\`${value}\\`.`);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * @publicApi\n **/\nexport interface HttpParameterCodec {\n  encodeKey(key: string): string;\n  encodeValue(value: string): string;\n\n  decodeKey(key: string): string;\n  decodeValue(value: string): string;\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nexport class HttpUrlEncodingCodec implements HttpParameterCodec {\n  /**\n   * Encodes a key name for a URL parameter or query-string.\n   * @param key The key name.\n   * @returns The encoded key name.\n   */\n  encodeKey(key: string): string {\n    return standardEncoding(key);\n  }\n\n  /**\n   * Encodes the value of a URL parameter or query-string.\n   * @param value The value.\n   * @returns The encoded value.\n   */\n  encodeValue(value: string): string {\n    return standardEncoding(value);\n  }\n\n  /**\n   * Decodes an encoded URL parameter or query-string key.\n   * @param key The encoded key name.\n   * @returns The decoded key name.\n   */\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  /**\n   * Decodes an encoded URL parameter or query-string value.\n   * @param value The encoded value.\n   * @returns The decoded value.\n   */\n  decodeValue(value: string) {\n    return decodeURIComponent(value);\n  }\n}\n\n\nfunction paramParser(rawParams: string, codec: HttpParameterCodec): Map<string, string[]> {\n  const map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    const params: string[] = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach((param: string) => {\n      const eqIdx = param.indexOf('=');\n      const [key, val]: string[] = eqIdx == -1 ?\n          [codec.decodeKey(param), ''] :\n          [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS: {[x: string]: string} = {\n  '40': '@',\n  '3A': ':',\n  '24': '$',\n  '2C': ',',\n  '3B': ';',\n  '3D': '=',\n  '3F': '?',\n  '2F': '/',\n};\n\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v).replace(\n      STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\n\nfunction valueToString(value: string|number|boolean): string {\n  return `${value}`;\n}\n\ninterface Update {\n  param: string;\n  value?: string|number|boolean;\n  op: 'a'|'d'|'s';\n}\n\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * @publicApi\n */\nexport interface HttpParamsOptions {\n  /**\n   * String representation of the HTTP parameters in URL-query-string format.\n   * Mutually exclusive with `fromObject`.\n   */\n  fromString?: string;\n\n  /** Object map of the HTTP parameters. Mutually exclusive with `fromString`. */\n  fromObject?: {[param: string]: string|number|boolean|ReadonlyArray<string|number|boolean>};\n\n  /** Encoding codec used to parse and serialize the parameters. */\n  encoder?: HttpParameterCodec;\n}\n\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nexport class HttpParams {\n  private map: Map<string, string[]>|null;\n  private encoder: HttpParameterCodec;\n  private updates: Update[]|null = null;\n  private cloneFrom: HttpParams|null = null;\n\n  constructor(options: HttpParamsOptions = {} as HttpParamsOptions) {\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(`Cannot specify both fromString and fromObject.`);\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map<string, string[]>();\n      Object.keys(options.fromObject).forEach(key => {\n        const value = (options.fromObject as any)[key];\n        // convert the values to strings\n        const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n        this.map!.set(key, values);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n  has(param: string): boolean {\n    this.init();\n    return this.map!.has(param);\n  }\n\n  /**\n   * Retrieves the first value for a parameter.\n   * @param param The parameter name.\n   * @returns The first value of the given parameter,\n   * or `null` if the parameter is not present.\n   */\n  get(param: string): string|null {\n    this.init();\n    const res = this.map!.get(param);\n    return !!res ? res[0] : null;\n  }\n\n  /**\n   * Retrieves all values for a  parameter.\n   * @param param The parameter name.\n   * @returns All values in a string array,\n   * or `null` if the parameter not present.\n   */\n  getAll(param: string): string[]|null {\n    this.init();\n    return this.map!.get(param) || null;\n  }\n\n  /**\n   * Retrieves all the parameters for this body.\n   * @returns The parameter names in a string array.\n   */\n  keys(): string[] {\n    this.init();\n    return Array.from(this.map!.keys());\n  }\n\n  /**\n   * Appends a new value to existing values for a parameter.\n   * @param param The parameter name.\n   * @param value The new value to add.\n   * @return A new body with the appended value.\n   */\n  append(param: string, value: string|number|boolean): HttpParams {\n    return this.clone({param, value, op: 'a'});\n  }\n\n  /**\n   * Constructs a new body with appended values for the given parameter name.\n   * @param params parameters and values\n   * @return A new body with the new value.\n   */\n  appendAll(params: {[param: string]: string|number|boolean|ReadonlyArray<string|number|boolean>}):\n      HttpParams {\n    const updates: Update[] = [];\n    Object.keys(params).forEach(param => {\n      const value = params[param];\n      if (Array.isArray(value)) {\n        value.forEach(_value => {\n          updates.push({param, value: _value, op: 'a'});\n        });\n      } else {\n        updates.push({param, value: value as (string | number | boolean), op: 'a'});\n      }\n    });\n    return this.clone(updates);\n  }\n\n  /**\n   * Replaces the value for a parameter.\n   * @param param The parameter name.\n   * @param value The new value.\n   * @return A new body with the new value.\n   */\n  set(param: string, value: string|number|boolean): HttpParams {\n    return this.clone({param, value, op: 's'});\n  }\n\n  /**\n   * Removes a given value or all values from a parameter.\n   * @param param The parameter name.\n   * @param value The value to remove, if provided.\n   * @return A new body with the given value removed, or with all values\n   * removed if no value is specified.\n   */\n  delete(param: string, value?: string|number|boolean): HttpParams {\n    return this.clone({param, value, op: 'd'});\n  }\n\n  /**\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   */\n  toString(): string {\n    this.init();\n    return this.keys()\n        .map(key => {\n          const eKey = this.encoder.encodeKey(key);\n          // `a: ['1']` produces `'a=1'`\n          // `b: []` produces `''`\n          // `c: ['1', '2']` produces `'c=1&c=2'`\n          return this.map!.get(key)!.map(value => eKey + '=' + this.encoder.encodeValue(value))\n              .join('&');\n        })\n        // filter out empty values because `b: []` produces `''`\n        // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n        .filter(param => param !== '')\n        .join('&');\n  }\n\n  private clone(update: Update|Update[]): HttpParams {\n    const clone = new HttpParams({encoder: this.encoder} as HttpParamsOptions);\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat(update);\n    return clone;\n  }\n\n  private init() {\n    if (this.map === null) {\n      this.map = new Map<string, string[]>();\n    }\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(key => this.map!.set(key, this.cloneFrom!.map!.get(key)!));\n      this.updates!.forEach(update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map!.get(update.param) : undefined) || [];\n            base.push(valueToString(update.value!));\n            this.map!.set(update.param, base);\n            break;\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map!.get(update.param) || [];\n              const idx = base.indexOf(valueToString(update.value));\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n              if (base.length > 0) {\n                this.map!.set(update.param, base);\n              } else {\n                this.map!.delete(update.param);\n              }\n            } else {\n              this.map!.delete(update.param);\n              break;\n            }\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nexport class HttpContextToken<T> {\n  constructor(public readonly defaultValue: () => T) {}\n}\n\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nexport class HttpContext {\n  private readonly map = new Map<HttpContextToken<unknown>, unknown>();\n\n  /**\n   * Store a value in the context. If a value is already present it will be overwritten.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   * @param value The value to store.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  set<T>(token: HttpContextToken<T>, value: T): HttpContext {\n    this.map.set(token, value);\n    return this;\n  }\n\n  /**\n   * Retrieve the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns The stored value or default if one is defined.\n   */\n  get<T>(token: HttpContextToken<T>): T {\n    if (!this.map.has(token)) {\n      this.map.set(token, token.defaultValue());\n    }\n    return this.map.get(token) as T;\n  }\n\n  /**\n   * Delete the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  delete(token: HttpContextToken<unknown>): HttpContext {\n    this.map.delete(token);\n    return this;\n  }\n\n  /**\n   * Checks for existence of a given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns True if the token exists, false otherwise.\n   */\n  has(token: HttpContextToken<unknown>): boolean {\n    return this.map.has(token);\n  }\n\n  /**\n   * @returns a list of tokens currently stored in the context.\n   */\n  keys(): IterableIterator<HttpContextToken<unknown>> {\n    return this.map.keys();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpContext} from './context';\nimport {HttpHeaders} from './headers';\nimport {HttpParams} from './params';\n\n\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n */\ninterface HttpRequestInit {\n  headers?: HttpHeaders;\n  context?: HttpContext;\n  reportProgress?: boolean;\n  params?: HttpParams;\n  responseType?: 'arraybuffer'|'blob'|'json'|'text';\n  withCredentials?: boolean;\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method: string): boolean {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value: any): value is ArrayBuffer {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value: any): value is Blob {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value: any): value is FormData {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value: any): value is URLSearchParams {\n  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nexport class HttpRequest<T> {\n  /**\n   * The request body, or `null` if one isn't set.\n   *\n   * Bodies are not enforced to be immutable, as they can include a reference to any\n   * user-defined data type. However, interceptors should take care to preserve\n   * idempotence by treating them as such.\n   */\n  readonly body: T|null = null;\n\n  /**\n   * Outgoing headers for this request.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly headers!: HttpHeaders;\n\n  /**\n   * Shared and mutable context that can be used by interceptors\n   */\n  readonly context!: HttpContext;\n\n  /**\n   * Whether this request should be made in a way that exposes progress events.\n   *\n   * Progress events are expensive (change detection runs on each event) and so\n   * they should only be requested if the consumer intends to monitor them.\n   */\n  readonly reportProgress: boolean = false;\n\n  /**\n   * Whether this request should be sent with outgoing credentials (cookies).\n   */\n  readonly withCredentials: boolean = false;\n\n  /**\n   * The expected response type of the server.\n   *\n   * This is used to parse the response appropriately before returning it to\n   * the requestee.\n   */\n  readonly responseType: 'arraybuffer'|'blob'|'json'|'text' = 'json';\n\n  /**\n   * The outgoing HTTP request method.\n   */\n  readonly method: string;\n\n  /**\n   * Outgoing URL parameters.\n   *\n   * To pass a string representation of HTTP parameters in the URL-query-string format,\n   * the `HttpParamsOptions`' `fromString` may be used. For example:\n   *\n   * ```\n   * new HttpParams({fromString: 'angular=awesome'})\n   * ```\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly params!: HttpParams;\n\n  /**\n   * The outgoing URL with all URL parameters set.\n   */\n  readonly urlWithParams: string;\n\n  constructor(method: 'DELETE'|'GET'|'HEAD'|'JSONP'|'OPTIONS', url: string, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(method: 'POST'|'PUT'|'PATCH', url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(method: string, url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(\n      method: string, readonly url: string, third?: T|{\n        headers?: HttpHeaders,\n        context?: HttpContext,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n      }|null,\n      fourth?: {\n        headers?: HttpHeaders,\n        context?: HttpContext,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n      }) {\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    let options: HttpRequestInit|undefined;\n\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = (third !== undefined) ? third as T : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third as HttpRequestInit;\n    }\n\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n\n      // Override headers if they're provided.\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.context) {\n        this.context = options.context;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    }\n\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    }\n\n    // If no context have been passed in, construct a new HttpContext instance.\n    if (!this.context) {\n      this.context = new HttpContext();\n    }\n\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        const sep: string = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n  serializeBody(): ArrayBuffer|Blob|FormData|string|null {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    }\n    // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n        isUrlSearchParams(this.body) || typeof this.body === 'string') {\n      return this.body;\n    }\n    // Check whether the body is an instance of HttpUrlEncodedParams.\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    }\n    // Check whether the body is an object or array, and serialize with JSON if so.\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n        Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    }\n    // Fall back on toString() for everything else.\n    return (this.body as any).toString();\n  }\n\n  /**\n   * Examine the body and attempt to infer an appropriate MIME type\n   * for it.\n   *\n   * If no such type can be inferred, this method will return `null`.\n   */\n  detectContentTypeHeader(): string|null {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    }\n    // FormData bodies rely on the browser's content type assignment.\n    if (isFormData(this.body)) {\n      return null;\n    }\n    // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    }\n    // Array buffers have unknown contents and thus no type can be inferred.\n    if (isArrayBuffer(this.body)) {\n      return null;\n    }\n    // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n    if (typeof this.body === 'string') {\n      return 'text/plain';\n    }\n    // `HttpUrlEncodedParams` has its own content-type.\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n    // Arrays, objects, boolean and numbers will be encoded as JSON.\n    if (typeof this.body === 'object' || typeof this.body === 'number' ||\n        typeof this.body === 'boolean') {\n      return 'application/json';\n    }\n    // No type could be inferred.\n    return null;\n  }\n\n  clone(): HttpRequest<T>;\n  clone(update: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: T|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<T>;\n  clone<V>(update: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: V|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<V>;\n  clone(update: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: any|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string};\n  } = {}): HttpRequest<any> {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType;\n\n    // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n    const body = (update.body !== undefined) ? update.body : this.body;\n\n    // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n    const withCredentials =\n        (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n    const reportProgress =\n        (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n\n    // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params;\n\n    // Pass on context if needed\n    const context = update.context ?? this.context;\n\n    // Check whether the caller has asked to add headers.\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers =\n          Object.keys(update.setHeaders)\n              .reduce((headers, name) => headers.set(name, update.setHeaders![name]), headers);\n    }\n\n    // Check whether the caller has asked to set params.\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams)\n                   .reduce((params, param) => params.set(param, update.setParams![param]), params);\n    }\n\n    // Finally, construct the new HttpRequest using the pieces from above.\n    return new HttpRequest(method, url, body, {\n      params,\n      headers,\n      context,\n      reportProgress,\n      responseType,\n      withCredentials,\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpHeaders} from './headers';\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nexport enum HttpEventType {\n  /**\n   * The request was sent out over the wire.\n   */\n  Sent,\n\n  /**\n   * An upload progress event was received.\n   */\n  UploadProgress,\n\n  /**\n   * The response status code and headers were received.\n   */\n  ResponseHeader,\n\n  /**\n   * A download progress event was received.\n   */\n  DownloadProgress,\n\n  /**\n   * The full response including the body was received.\n   */\n  Response,\n\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n  User,\n}\n\n/**\n * Base interface for progress events.\n *\n * @publicApi\n */\nexport interface HttpProgressEvent {\n  /**\n   * Progress event type is either upload or download.\n   */\n  type: HttpEventType.DownloadProgress|HttpEventType.UploadProgress;\n\n  /**\n   * Number of bytes uploaded or downloaded.\n   */\n  loaded: number;\n\n  /**\n   * Total number of bytes to upload or download. Depending on the request or\n   * response, this may not be computable and thus may not be present.\n   */\n  total?: number;\n}\n\n/**\n * A download progress event.\n *\n * @publicApi\n */\nexport interface HttpDownloadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.DownloadProgress;\n\n  /**\n   * The partial response body as downloaded so far.\n   *\n   * Only present if the responseType was `text`.\n   */\n  partialText?: string;\n}\n\n/**\n * An upload progress event.\n *\n * @publicApi\n */\nexport interface HttpUploadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.UploadProgress;\n}\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * @publicApi\n */\nexport interface HttpSentEvent {\n  type: HttpEventType.Sent;\n}\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * @publicApi\n */\nexport interface HttpUserEvent<T> {\n  type: HttpEventType.User;\n}\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n */\nexport interface HttpJsonParseError {\n  error: Error;\n  text: string;\n}\n\n/**\n * Union type for all possible events on the response stream.\n *\n * Typed according to the expected type of the response.\n *\n * @publicApi\n */\nexport type HttpEvent<T> =\n    HttpSentEvent|HttpHeaderResponse|HttpResponse<T>|HttpProgressEvent|HttpUserEvent<T>;\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nexport abstract class HttpResponseBase {\n  /**\n   * All response headers.\n   */\n  readonly headers: HttpHeaders;\n\n  /**\n   * Response status code.\n   */\n  readonly status: number;\n\n  /**\n   * Textual description of response status code, defaults to OK.\n   *\n   * Do not depend on this.\n   */\n  readonly statusText: string;\n\n  /**\n   * URL of the resource retrieved, or null if not available.\n   */\n  readonly url: string|null;\n\n  /**\n   * Whether the status code falls in the 2xx range.\n   */\n  readonly ok: boolean;\n\n  /**\n   * Type of the response, narrowed to either the full response or the header.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly type!: HttpEventType.Response|HttpEventType.ResponseHeader;\n\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   */\n  constructor(\n      init: {\n        headers?: HttpHeaders,\n        status?: number,\n        statusText?: string,\n        url?: string,\n      },\n      defaultStatus: number = HttpStatusCode.Ok, defaultStatusText: string = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n}\n\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nexport class HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  constructor(init: {\n    headers?: HttpHeaders,\n    status?: number,\n    statusText?: string,\n    url?: string,\n  } = {}) {\n    super(init);\n  }\n\n  override readonly type: HttpEventType.ResponseHeader = HttpEventType.ResponseHeader;\n\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;} = {}):\n      HttpHeaderResponse {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nexport class HttpResponse<T> extends HttpResponseBase {\n  /**\n   * The response body, or `null` if one was not returned.\n   */\n  readonly body: T|null;\n\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  constructor(init: {\n    body?: T|null,\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  } = {}) {\n    super(init);\n    this.body = init.body !== undefined ? init.body : null;\n  }\n\n  override readonly type: HttpEventType.Response = HttpEventType.Response;\n\n  clone(): HttpResponse<T>;\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;}):\n      HttpResponse<T>;\n  clone<V>(update: {\n    body?: V|null,\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }): HttpResponse<V>;\n  clone(update: {\n    body?: any|null;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  } = {}): HttpResponse<any> {\n    return new HttpResponse<any>({\n      body: (update.body !== undefined) ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: (update.status !== undefined) ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nexport class HttpErrorResponse extends HttpResponseBase implements Error {\n  readonly name = 'HttpErrorResponse';\n  readonly message: string;\n  readonly error: any|null;\n\n  /**\n   * Errors are never okay, even when the status code is in the 2xx success range.\n   */\n  override readonly ok = false;\n\n  constructor(init: {\n    error?: any;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${\n          init.statusText}`;\n    }\n    this.error = init.error || null;\n  }\n}\n\n/**\n * Http status codes.\n * As per https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n * @publicApi\n */\nexport const enum HttpStatusCode {\n  Continue = 100,\n  SwitchingProtocols = 101,\n  Processing = 102,\n  EarlyHints = 103,\n\n  Ok = 200,\n  Created = 201,\n  Accepted = 202,\n  NonAuthoritativeInformation = 203,\n  NoContent = 204,\n  ResetContent = 205,\n  PartialContent = 206,\n  MultiStatus = 207,\n  AlreadyReported = 208,\n  ImUsed = 226,\n\n  MultipleChoices = 300,\n  MovedPermanently = 301,\n  Found = 302,\n  SeeOther = 303,\n  NotModified = 304,\n  UseProxy = 305,\n  Unused = 306,\n  TemporaryRedirect = 307,\n  PermanentRedirect = 308,\n\n  BadRequest = 400,\n  Unauthorized = 401,\n  PaymentRequired = 402,\n  Forbidden = 403,\n  NotFound = 404,\n  MethodNotAllowed = 405,\n  NotAcceptable = 406,\n  ProxyAuthenticationRequired = 407,\n  RequestTimeout = 408,\n  Conflict = 409,\n  Gone = 410,\n  LengthRequired = 411,\n  PreconditionFailed = 412,\n  PayloadTooLarge = 413,\n  UriTooLong = 414,\n  UnsupportedMediaType = 415,\n  RangeNotSatisfiable = 416,\n  ExpectationFailed = 417,\n  ImATeapot = 418,\n  MisdirectedRequest = 421,\n  UnprocessableEntity = 422,\n  Locked = 423,\n  FailedDependency = 424,\n  TooEarly = 425,\n  UpgradeRequired = 426,\n  PreconditionRequired = 428,\n  TooManyRequests = 429,\n  RequestHeaderFieldsTooLarge = 431,\n  UnavailableForLegalReasons = 451,\n\n  InternalServerError = 500,\n  NotImplemented = 501,\n  BadGateway = 502,\n  ServiceUnavailable = 503,\n  GatewayTimeout = 504,\n  HttpVersionNotSupported = 505,\n  VariantAlsoNegotiates = 506,\n  InsufficientStorage = 507,\n  LoopDetected = 508,\n  NotExtended = 510,\n  NetworkAuthenticationRequired = 511\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {concatMap, filter, map} from 'rxjs/operators';\n\nimport {HttpHandler} from './backend';\nimport {HttpContext} from './context';\nimport {HttpHeaders} from './headers';\nimport {HttpParams, HttpParamsOptions} from './params';\nimport {HttpRequest} from './request';\nimport {HttpEvent, HttpResponse} from './response';\n\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody<T>(\n    options: {\n      headers?: HttpHeaders|{[header: string]: string | string[]},\n      context?: HttpContext,\n      observe?: 'body'|'events'|'response',\n      params?: HttpParams|\n            {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n      reportProgress?: boolean,\n      responseType?: 'arraybuffer'|'blob'|'json'|'text',\n      withCredentials?: boolean,\n    },\n    body: T|null): any {\n  return {\n    body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials,\n  };\n}\n\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/tour-of-heroes/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpClient {\n  constructor(private handler: HttpHandler) {}\n\n  /**\n   * Sends an `HttpRequest` and returns a stream of `HttpEvent`s.\n   *\n   * @return An `Observable` of the response, with the response body as a stream of `HttpEvent`s.\n   */\n  request<R>(req: HttpRequest<any>): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the response in\n   * an `ArrayBuffer`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a request that interprets the body as a blob and returns\n   * the response as a blob.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an array of `HttpEvent`s for\n   * the request.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n          observe: 'events',\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a request that interprets the body as a `Blob` and returns\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text string and returns the full event\n   * stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the  request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `Object`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'events',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<any>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'events',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request which interprets the body as an `ArrayBuffer`\n   * and returns the full `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body as an `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a request which interprets the body as a `Blob` and returns the full `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text stream and returns the full\n   * `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the HTTP response, with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns\n   * the full `HttpResponse` with the response body in the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the full `HttpResponse`, with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<R>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * `HttpResponse` as a JavaScript object.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n   */\n  request(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    reportProgress?: boolean,\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object\n   * with the response body of the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    reportProgress?: boolean,\n    withCredentials?: boolean,\n  }): Observable<R>;\n\n  /**\n   * Constructs a request where response type and requested observable are not known statically.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the requested response, with body of type `any`.\n   */\n  request(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    observe?: 'body'|'events'|'response',\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  }): Observable<any>;\n\n  /**\n   * Constructs an observable for a generic HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\n   * the call returns an observable of the raw `HttpEvent` stream.\n   *\n   * Alternatively you can pass an HTTP method as the first parameter,\n   * a URL string as the second, and an options hash containing the request body as the third.\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n   * type of returned observable.\n   *   * The `responseType` value determines how a successful response body is parsed.\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n   * object as a type parameter to the call.\n   *\n   * The `observe` value determines the return type, according to what you are interested in\n   * observing.\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n   * progress events by default.\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\n   * parameter.\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n   *\n   */\n  request(first: string|HttpRequest<any>, url?: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    let req: HttpRequest<any>;\n    // First, check whether the primary argument is an instance of `HttpRequest`.\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = first;\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming `GET` unless a method is\n      // provided.\n\n      // Figure out the headers.\n      let headers: HttpHeaders|undefined = undefined;\n      if (options.headers instanceof HttpHeaders) {\n        headers = options.headers;\n      } else {\n        headers = new HttpHeaders(options.headers);\n      }\n\n      // Sort out parameters.\n      let params: HttpParams|undefined = undefined;\n      if (!!options.params) {\n        if (options.params instanceof HttpParams) {\n          params = options.params;\n        } else {\n          params = new HttpParams({fromObject: options.params} as HttpParamsOptions);\n        }\n      }\n\n      // Construct the request.\n      req = new HttpRequest(first, url!, (options.body !== undefined ? options.body : null), {\n        headers,\n        context: options.context,\n        params,\n        reportProgress: options.reportProgress,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials,\n      });\n    }\n\n    // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n    const events$: Observable<HttpEvent<any>> =\n        of(req).pipe(concatMap((req: HttpRequest<any>) => this.handler.handle(req)));\n\n    // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    }\n\n    // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n    const res$: Observable<HttpResponse<any>> = <Observable<HttpResponse<any>>>events$.pipe(\n        filter((event: HttpEvent<any>) => event instanceof HttpResponse));\n\n    // Decide which stream to return.\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is an ArrayBuffer.\n              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                throw new Error('Response is not an ArrayBuffer.');\n              }\n              return res.body;\n            }));\n          case 'blob':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is a Blob.\n              if (res.body !== null && !(res.body instanceof Blob)) {\n                throw new Error('Response is not a Blob.');\n              }\n              return res.body;\n            }));\n          case 'text':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is a string.\n              if (res.body !== null && typeof res.body !== 'string') {\n                throw new Error('Response is not a string.');\n              }\n              return res.body;\n            }));\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return res$.pipe(map((res: HttpResponse<any>) => res.body));\n        }\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n      default:\n        // Guard against new future observe types being added.\n        throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n    }\n  }\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<ArrayBuffer>;\n\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response body as a `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string and returns\n   * a string.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    body?: any|null\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with the response body as a\n   * `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response\n   * body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with response body of\n   * type `Object`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `DELETE`request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with a response\n   * body in the requested type.\n   */\n  delete<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | (string | number | boolean)[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`, with the response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text stream and\n   *  returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`, with the response body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `DELETE` request the interprets the body as a JavaScript object and returns\n   * the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n   *\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of the requested type.\n   */\n  delete<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  delete(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a DELETE request that interprets the body as JSON and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with response body in the requested type.\n   */\n  delete<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `DELETE` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  } = {}): Observable<any> {\n    return this.request<any>('DELETE', url, options as any);\n  }\n\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns the\n   * response in an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob`\n   * and returns the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string\n   * and returns the response as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response\n   * body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string and returns\n   * the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with a response body in the requested type.\n   */\n  get<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text stream and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  get<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response body as a JavaScript object.\n   */\n  get(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and returns\n   * the response body in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with a response body in the requested type.\n   */\n  get<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `GET` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('GET', url, options as any);\n  }\n\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer` and\n   * returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response, with the response body as a `Blob`.\n   */\n\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string and returns the response\n   * as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an  `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response body of type\n   * string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON\n   * and returns the full HTTP event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n   * type `Object`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the full event stream.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   */\n  head<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a blob.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as text stream\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body of the requested type.\n   */\n  head<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  head(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body of the given type.\n   */\n  head<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `HEAD` request to execute on the server. The `HEAD` method returns\n   * meta information about the resource without transferring the\n   * resource itself. See the individual overloads for\n   * details on the return type.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('HEAD', url, options as any);\n  }\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * @return An `Observable` of the response object, with response body as an object.\n   */\n  jsonp(url: string, callbackParam: string): Observable<Object>;\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * You must install a suitable interceptor, such as one provided by `HttpClientJsonpModule`.\n   * If no such interceptor is reached,\n   * then the `JSONP` request can be rejected by the configured backend.\n   *\n   * @return An `Observable` of the response object, with response body in the requested type.\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes a request with the special method\n   * `JSONP` to be dispatched via the interceptor pipeline.\n   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n   * API endpoints that don't support newer,\n   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n   * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n   * application making the request.\n   * The endpoint API must support JSONP callback for JSONP requests to work.\n   * The resource API returns the JSON response wrapped in a callback function.\n   * You can pass the callback function name as one of the query parameters.\n   * Note that JSONP requests can only be used with `GET` requests.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T> {\n    return this.request<any>('JSONP', url, {\n      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n      observe: 'body',\n      responseType: 'json',\n    });\n  }\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an\n   * `ArrayBuffer` and returns the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request with the response\n   * body of type `Object`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as text stream\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs an `OPTIONS` request that interprets the body as JSON and returns the\n   * response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  options(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and returns the\n   * response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse`, with a response body of the given type.\n   */\n  options<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes the configured\n   * `OPTIONS` request to execute on the server. This method allows the client\n   * to determine the supported HTTP methods and other capabilities of an endpoint,\n   * without implying a resource action. See the individual overloads for\n   * details on the return type.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('OPTIONS', url, options as any);\n  }\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and returns\n   * the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the response\n   * as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and\n   *  returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with the\n   * response body as `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with a\n   * response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body of type `Object`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  patch<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text stream and returns the\n   * full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs a `PATCH` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  patch(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PATCH` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('PATCH', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and returns\n   * an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the\n   * response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob`\n   * and returns the response in an observable of the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response body as `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a POST request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with a response body of type `Object`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a POST request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  post<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a POST request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request, with the response body as an\n   * `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text stream and returns\n   * the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n   * `Object`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON and returns the\n   * full `HttpResponse`.\n   *\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body in the\n   * requested type.\n   */\n  post<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns the response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  post(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns an observable of the response.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request, with a response body in the\n   * requested type.\n   */\n  post<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `POST` request to execute on the server. The server responds with the location of\n   * the replaced resource. See the individual overloads for\n   * details on the return type.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('POST', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and returns the\n   * response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body\n   * of type string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n   * type `Object`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the\n   * full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an\n   * `ArrayBuffer` and returns an observable of the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with the response body as an\n   * `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text stream and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n   * string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the full\n   * HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body\n   * of type 'Object`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an instance of the requested type and\n   * returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON\n   * and returns an observable of JavaScript object.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response as a JavaScript object.\n   */\n  put(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an instance of the requested type\n   * and returns an observable of the requested type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the requested type.\n   */\n  put<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n   * with a new set of values.\n   * See the individual overloads for details on the return type.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('PUT', url, addBody(options, body));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EnvironmentInjector, inject, Injectable, InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * @publicApi\n *\n * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)\n *\n * @usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector.\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the\n * interceptors provided in the root module.\n */\nexport interface HttpInterceptor {\n  /**\n   * Identifies and handles a given HTTP request.\n   * @param req The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n\n/**\n * Represents the next interceptor in an interceptor chain, or the real backend if there are no\n * further interceptors.\n *\n * Most interceptors will delegate to this function, and either modify the outgoing request or the\n * response when it arrives. Within the scope of the current request, however, this function may be\n * called any number of times, for any number of downstream requests. Such downstream requests need\n * not be to the same URL or even the same origin as the current request. It is also valid to not\n * call the downstream handler at all, and process the current request entirely within the\n * interceptor.\n *\n * This function should only be called within the scope of the request that's currently being\n * intercepted. Once that request is complete, this downstream handler function should not be\n * called.\n *\n * @publicApi\n *\n * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)\n */\nexport type HttpHandlerFn = (req: HttpRequest<unknown>) => Observable<HttpEvent<unknown>>;\n\n/**\n * An interceptor for HTTP requests made via `HttpClient`.\n *\n * `HttpInterceptorFn`s are middleware functions which `HttpClient` calls when a request is made.\n * These functions have the opportunity to modify the outgoing request or any response that comes\n * back, as well as block, redirect, or otherwise change the request or response semantics.\n *\n * An `HttpHandlerFn` representing the next interceptor (or the backend which will make a real HTTP\n * request) is provided. Most interceptors will delegate to this function, but that is not required\n * (see `HttpHandlerFn` for more details).\n *\n * `HttpInterceptorFn`s have access to `inject()` via the `EnvironmentInjector` from which they were\n * configured.\n */\nexport type HttpInterceptorFn = (req: HttpRequest<unknown>, next: HttpHandlerFn) =>\n    Observable<HttpEvent<unknown>>;\n\n/**\n * Function which invokes an HTTP interceptor chain.\n *\n * Each interceptor in the interceptor chain is turned into a `ChainedInterceptorFn` which closes\n * over the rest of the chain (represented by another `ChainedInterceptorFn`). The last such\n * function in the chain will instead delegate to the `finalHandlerFn`, which is passed down when\n * the chain is invoked.\n *\n * This pattern allows for a chain of many interceptors to be composed and wrapped in a single\n * `HttpInterceptorFn`, which is a useful abstraction for including different kinds of interceptors\n * (e.g. legacy class-based interceptors) in the same chain.\n */\ntype ChainedInterceptorFn<RequestT> = (req: HttpRequest<RequestT>, finalHandlerFn: HttpHandlerFn) =>\n    Observable<HttpEvent<RequestT>>;\n\nfunction interceptorChainEndFn(\n    req: HttpRequest<any>, finalHandlerFn: HttpHandlerFn): Observable<HttpEvent<any>> {\n  return finalHandlerFn(req);\n}\n\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(\n    chainTailFn: ChainedInterceptorFn<any>,\n    interceptor: HttpInterceptor): ChainedInterceptorFn<any> {\n  return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n    handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn),\n  });\n}\n\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(\n    chainTailFn: ChainedInterceptorFn<unknown>, interceptorFn: HttpInterceptorFn,\n    injector: EnvironmentInjector): ChainedInterceptorFn<unknown> {\n  // clang-format off\n  return (initialRequest, finalHandlerFn) => injector.runInContext(() =>\n    interceptorFn(\n      initialRequest,\n      downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)\n    )\n  );\n  // clang-format on\n}\n\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nexport const HTTP_INTERCEPTORS = new InjectionToken<HttpInterceptor[]>('HTTP_INTERCEPTORS');\n\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nexport const HTTP_INTERCEPTOR_FNS = new InjectionToken<HttpInterceptorFn[]>('HTTP_INTERCEPTOR_FNS');\n\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nexport function legacyInterceptorFnFactory(): HttpInterceptorFn {\n  let chain: ChainedInterceptorFn<any>|null = null;\n\n  return (req, handler) => {\n    if (chain === null) {\n      const interceptors = inject(HTTP_INTERCEPTORS, {optional: true}) ?? [];\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      chain = interceptors.reduceRight(\n          adaptLegacyInterceptorToChain, interceptorChainEndFn as ChainedInterceptorFn<any>);\n    }\n\n    return chain(req, handler);\n  };\n}\n\n@Injectable()\nexport class HttpInterceptorHandler extends HttpHandler {\n  private chain: ChainedInterceptorFn<unknown>|null = null;\n\n  constructor(private backend: HttpBackend, private injector: EnvironmentInjector) {\n    super();\n  }\n\n  override handle(initialRequest: HttpRequest<any>): Observable<HttpEvent<any>> {\n    if (this.chain === null) {\n      const dedupedInterceptorFns = Array.from(new Set(this.injector.get(HTTP_INTERCEPTOR_FNS)));\n\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      this.chain = dedupedInterceptorFns.reduceRight(\n          (nextSequencedFn, interceptorFn) =>\n              chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector),\n          interceptorChainEndFn as ChainedInterceptorFn<unknown>);\n    }\n    return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {EnvironmentInjector, Inject, inject, Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpHandlerFn} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpErrorResponse, HttpEvent, HttpEventType, HttpResponse, HttpStatusCode} from './response';\n\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId: number = 0;\n\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument: Document|undefined;\n\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nexport const JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nexport const JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nexport const JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nexport const JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nexport abstract class JsonpCallbackContext {\n  [key: string]: (data: any) => void;\n}\n\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nexport function jsonpCallbackContext(): Object {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\n@Injectable()\nexport class JsonpClientBackend implements HttpBackend {\n  /**\n   * A resolved promise that can be used to schedule microtasks in the event handlers.\n   */\n  private readonly resolvedPromise = Promise.resolve();\n\n  constructor(private callbackMap: JsonpCallbackContext, @Inject(DOCUMENT) private document: any) {}\n\n  /**\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n   */\n  private nextCallback(): string {\n    return `ng_jsonp_callback_${nextRequestId++}`;\n  }\n\n  /**\n   * Processes a JSONP request and returns an event stream of the results.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   *\n   */\n  handle(req: HttpRequest<never>): Observable<HttpEvent<any>> {\n    // Firstly, check both the method and response type. If either doesn't match\n    // then the request was improperly routed here and cannot be handled.\n    if (req.method !== 'JSONP') {\n      throw new Error(JSONP_ERR_WRONG_METHOD);\n    } else if (req.responseType !== 'json') {\n      throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n    }\n\n    // Check the request headers. JSONP doesn't support headers and\n    // cannot set any that were supplied.\n    if (req.headers.keys().length > 0) {\n      throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n    }\n\n    // Everything else happens inside the Observable boundary.\n    return new Observable<HttpEvent<any>>((observer: Observer<HttpEvent<any>>) => {\n      // The first step to make a request is to generate the callback name, and replace the\n      // callback placeholder in the URL with the name. Care has to be taken here to ensure\n      // a trailing &, if matched, gets inserted back into the URL in the correct place.\n      const callback = this.nextCallback();\n      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n\n      // Construct the <script> tag and point it at the URL.\n      const node = this.document.createElement('script');\n      node.src = url;\n\n      // A JSONP request requires waiting for multiple callbacks. These variables\n      // are closed over and track state across those callbacks.\n\n      // The response object, if one has been received, or null otherwise.\n      let body: any|null = null;\n\n      // Whether the response callback has been called.\n      let finished: boolean = false;\n\n      // Set the response callback in this.callbackMap (which will be the window\n      // object in the browser. The script being loaded via the <script> tag will\n      // eventually call this callback.\n      this.callbackMap[callback] = (data?: any) => {\n        // Data has been received from the JSONP script. Firstly, delete this callback.\n        delete this.callbackMap[callback];\n\n        // Set state to indicate data was received.\n        body = data;\n        finished = true;\n      };\n\n      // cleanup() is a utility closure that removes the <script> from the page and\n      // the response callback from the window. This logic is used in both the\n      // success, error, and cancellation paths, so it's extracted out for convenience.\n      const cleanup = () => {\n        // Remove the <script> tag if it's still on the page.\n        if (node.parentNode) {\n          node.parentNode.removeChild(node);\n        }\n\n        // Remove the response callback from the callbackMap (window object in the\n        // browser).\n        delete this.callbackMap[callback];\n      };\n\n      // onLoad() is the success callback which runs after the response callback\n      // if the JSONP script loads successfully. The event itself is unimportant.\n      // If something went wrong, onLoad() may run without the response callback\n      // having been invoked.\n      const onLoad = (event: Event) => {\n        // We wrap it in an extra Promise, to ensure the microtask\n        // is scheduled after the loaded endpoint has executed any potential microtask itself,\n        // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n        this.resolvedPromise.then(() => {\n          // Cleanup the page.\n          cleanup();\n\n          // Check whether the response callback has run.\n          if (!finished) {\n            // It hasn't, something went wrong with the request. Return an error via\n            // the Observable error path. All JSONP errors have status 0.\n            observer.error(new HttpErrorResponse({\n              url,\n              status: 0,\n              statusText: 'JSONP Error',\n              error: new Error(JSONP_ERR_NO_CALLBACK),\n            }));\n            return;\n          }\n\n          // Success. body either contains the response body or null if none was\n          // returned.\n          observer.next(new HttpResponse({\n            body,\n            status: HttpStatusCode.Ok,\n            statusText: 'OK',\n            url,\n          }));\n\n          // Complete the stream, the response is over.\n          observer.complete();\n        });\n      };\n\n      // onError() is the error callback, which runs if the script returned generates\n      // a Javascript error. It emits the error via the Observable error channel as\n      // a HttpErrorResponse.\n      const onError: any = (error: Error) => {\n        cleanup();\n\n        // Wrap the error in a HttpErrorResponse.\n        observer.error(new HttpErrorResponse({\n          error,\n          status: 0,\n          statusText: 'JSONP Error',\n          url,\n        }));\n      };\n\n      // Subscribe to both the success (load) and error events on the <script> tag,\n      // and add it to the page.\n      node.addEventListener('load', onLoad);\n      node.addEventListener('error', onError);\n      this.document.body.appendChild(node);\n\n      // The request has now been successfully sent.\n      observer.next({type: HttpEventType.Sent});\n\n      // Cancellation handler.\n      return () => {\n        if (!finished) {\n          this.removeListeners(node);\n        }\n\n        // And finally, clean up the page.\n        cleanup();\n      };\n    });\n  }\n\n  private removeListeners(script: HTMLScriptElement): void {\n    // Issue #34818\n    // Changing <script>'s ownerDocument will prevent it from execution.\n    // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n    if (!foreignDocument) {\n      foreignDocument = (this.document.implementation as DOMImplementation).createHTMLDocument();\n    }\n    foreignDocument.adoptNode(script);\n  }\n}\n\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nexport function jsonpInterceptorFn(\n    req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {\n  if (req.method === 'JSONP') {\n    return inject(JsonpClientBackend).handle(req as HttpRequest<never>);\n  }\n\n  // Fall through for normal HTTP requests.\n  return next(req);\n}\n\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\n@Injectable()\nexport class JsonpInterceptor {\n  constructor(private injector: EnvironmentInjector) {}\n\n  /**\n   * Identifies and handles a given JSONP request.\n   * @param initialRequest The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(initialRequest: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return this.injector.runInContext(\n        () => jsonpInterceptorFn(\n            initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {XhrFactory} from '@angular/common';\nimport {Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend} from './backend';\nimport {HttpHeaders} from './headers';\nimport {HttpRequest} from './request';\nimport {HttpDownloadProgressEvent, HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaderResponse, HttpJsonParseError, HttpResponse, HttpStatusCode, HttpUploadProgressEvent} from './response';\n\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr: any): string|null {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpXhrBackend implements HttpBackend {\n  constructor(private xhrFactory: XhrFactory) {}\n\n  /**\n   * Processes a request and returns a stream of response events.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   */\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the HttpClientJsonpModule\n    if (req.method === 'JSONP') {\n      throw new Error(\n          `Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n    }\n\n    // Everything happens on Observable subscription.\n    return new Observable((observer: Observer<HttpEvent<any>>) => {\n      // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n      const xhr = this.xhrFactory.build();\n      xhr.open(req.method, req.urlWithParams);\n      if (!!req.withCredentials) {\n        xhr.withCredentials = true;\n      }\n\n      // Add all the requested headers.\n      req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n\n      // Add an Accept header if one isn't present already.\n      if (!req.headers.has('Accept')) {\n        xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n      }\n\n      // Auto-detect the Content-Type header if one isn't present already.\n      if (!req.headers.has('Content-Type')) {\n        const detectedType = req.detectContentTypeHeader();\n        // Sometimes Content-Type detection fails.\n        if (detectedType !== null) {\n          xhr.setRequestHeader('Content-Type', detectedType);\n        }\n      }\n\n      // Set the responseType if one was requested.\n      if (req.responseType) {\n        const responseType = req.responseType.toLowerCase();\n\n        // JSON responses need to be processed as text. This is because if the server\n        // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n        // xhr.response will be null, and xhr.responseText cannot be accessed to\n        // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n        // is parsed by first requesting text and then applying JSON.parse.\n        xhr.responseType = ((responseType !== 'json') ? responseType : 'text') as any;\n      }\n\n      // Serialize the request body if one is present. If not, this will be set to null.\n      const reqBody = req.serializeBody();\n\n      // If progress events are enabled, response headers will be delivered\n      // in two events - the HttpHeaderResponse event and the full HttpResponse\n      // event. However, since response headers don't change in between these\n      // two events, it doesn't make sense to parse them twice. So headerResponse\n      // caches the data extracted from the response whenever it's first parsed,\n      // to ensure parsing isn't duplicated.\n      let headerResponse: HttpHeaderResponse|null = null;\n\n      // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n      // state, and memoizes it into headerResponse.\n      const partialFromXhr = (): HttpHeaderResponse => {\n        if (headerResponse !== null) {\n          return headerResponse;\n        }\n\n        const statusText = xhr.statusText || 'OK';\n\n        // Parse headers from XMLHttpRequest - this step is lazy.\n        const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n\n        // Read the response URL from the XMLHttpResponse instance and fall back on the\n        // request URL.\n        const url = getResponseUrl(xhr) || req.url;\n\n        // Construct the HttpHeaderResponse and memoize it.\n        headerResponse = new HttpHeaderResponse({headers, status: xhr.status, statusText, url});\n        return headerResponse;\n      };\n\n      // Next, a few closures are defined for the various events which XMLHttpRequest can\n      // emit. This allows them to be unregistered as event listeners later.\n\n      // First up is the load event, which represents a response being fully available.\n      const onLoad = () => {\n        // Read response state from the memoized partial data.\n        let {headers, status, statusText, url} = partialFromXhr();\n\n        // The body will be read out if present.\n        let body: any|null = null;\n\n        if (status !== HttpStatusCode.NoContent) {\n          // Use XMLHttpRequest.response if set, responseText otherwise.\n          body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n        }\n\n        // Normalize another potential bug (this one comes from CORS).\n        if (status === 0) {\n          status = !!body ? HttpStatusCode.Ok : 0;\n        }\n\n        // ok determines whether the response will be transmitted on the event or\n        // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n        // but a successful status code can still result in an error if the user\n        // asked for JSON data and the body cannot be parsed as such.\n        let ok = status >= 200 && status < 300;\n\n        // Check whether the body needs to be parsed as JSON (in many cases the browser\n        // will have done that already).\n        if (req.responseType === 'json' && typeof body === 'string') {\n          // Save the original body, before attempting XSSI prefix stripping.\n          const originalBody = body;\n          body = body.replace(XSSI_PREFIX, '');\n          try {\n            // Attempt the parse. If it fails, a parse error should be delivered to the user.\n            body = body !== '' ? JSON.parse(body) : null;\n          } catch (error) {\n            // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n            // JSON response. Restore the original body (including any XSSI prefix) to deliver\n            // a better error response.\n            body = originalBody;\n\n            // If this was an error request to begin with, leave it as a string, it probably\n            // just isn't JSON. Otherwise, deliver the parsing error to the user.\n            if (ok) {\n              // Even though the response status was 2xx, this is still an error.\n              ok = false;\n              // The parse error contains the text of the body that failed to parse.\n              body = {error, text: body} as HttpJsonParseError;\n            }\n          }\n        }\n\n        if (ok) {\n          // A successful response is delivered on the event stream.\n          observer.next(new HttpResponse({\n            body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined,\n          }));\n          // The full body has been received and delivered, no further events\n          // are possible. This request is complete.\n          observer.complete();\n        } else {\n          // An unsuccessful request is delivered on the error channel.\n          observer.error(new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined,\n          }));\n        }\n      };\n\n      // The onError callback is called when something goes wrong at the network level.\n      // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n      // transmitted on the error channel.\n      const onError = (error: ProgressEvent) => {\n        const {url} = partialFromXhr();\n        const res = new HttpErrorResponse({\n          error,\n          status: xhr.status || 0,\n          statusText: xhr.statusText || 'Unknown Error',\n          url: url || undefined,\n        });\n        observer.error(res);\n      };\n\n      // The sentHeaders flag tracks whether the HttpResponseHeaders event\n      // has been sent on the stream. This is necessary to track if progress\n      // is enabled since the event will be sent on only the first download\n      // progress event.\n      let sentHeaders = false;\n\n      // The download progress event handler, which is only registered if\n      // progress events are enabled.\n      const onDownProgress = (event: ProgressEvent) => {\n        // Send the HttpResponseHeaders event if it hasn't been sent already.\n        if (!sentHeaders) {\n          observer.next(partialFromXhr());\n          sentHeaders = true;\n        }\n\n        // Start building the download progress event to deliver on the response\n        // event stream.\n        let progressEvent: HttpDownloadProgressEvent = {\n          type: HttpEventType.DownloadProgress,\n          loaded: event.loaded,\n        };\n\n        // Set the total number of bytes in the event if it's available.\n        if (event.lengthComputable) {\n          progressEvent.total = event.total;\n        }\n\n        // If the request was for text content and a partial response is\n        // available on XMLHttpRequest, include it in the progress event\n        // to allow for streaming reads.\n        if (req.responseType === 'text' && !!xhr.responseText) {\n          progressEvent.partialText = xhr.responseText;\n        }\n\n        // Finally, fire the event.\n        observer.next(progressEvent);\n      };\n\n      // The upload progress event handler, which is only registered if\n      // progress events are enabled.\n      const onUpProgress = (event: ProgressEvent) => {\n        // Upload progress events are simpler. Begin building the progress\n        // event.\n        let progress: HttpUploadProgressEvent = {\n          type: HttpEventType.UploadProgress,\n          loaded: event.loaded,\n        };\n\n        // If the total number of bytes being uploaded is available, include\n        // it.\n        if (event.lengthComputable) {\n          progress.total = event.total;\n        }\n\n        // Send the event.\n        observer.next(progress);\n      };\n\n      // By default, register for load and error events.\n      xhr.addEventListener('load', onLoad);\n      xhr.addEventListener('error', onError);\n      xhr.addEventListener('timeout', onError);\n      xhr.addEventListener('abort', onError);\n\n      // Progress events are only enabled if requested.\n      if (req.reportProgress) {\n        // Download progress is always enabled if requested.\n        xhr.addEventListener('progress', onDownProgress);\n\n        // Upload progress depends on whether there is a body to upload.\n        if (reqBody !== null && xhr.upload) {\n          xhr.upload.addEventListener('progress', onUpProgress);\n        }\n      }\n\n      // Fire the request, and notify the event stream that it was fired.\n      xhr.send(reqBody!);\n      observer.next({type: HttpEventType.Sent});\n\n      // This is the return from the Observable function, which is the\n      // request cancellation handler.\n      return () => {\n        // On a cancellation, remove all registered event listeners.\n        xhr.removeEventListener('error', onError);\n        xhr.removeEventListener('abort', onError);\n        xhr.removeEventListener('load', onLoad);\n        xhr.removeEventListener('timeout', onError);\n        if (req.reportProgress) {\n          xhr.removeEventListener('progress', onDownProgress);\n          if (reqBody !== null && xhr.upload) {\n            xhr.upload.removeEventListener('progress', onUpProgress);\n          }\n        }\n\n        // Finally, abort the in-flight request.\n        if (xhr.readyState !== xhr.DONE) {\n          xhr.abort();\n        }\n      };\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵparseCookieValue as parseCookieValue} from '@angular/common';\nimport {EnvironmentInjector, Inject, inject, Injectable, InjectionToken, PLATFORM_ID} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpHandler} from './backend';\nimport {HttpHandlerFn, HttpInterceptor} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\nexport const XSRF_ENABLED = new InjectionToken<boolean>('XSRF_ENABLED');\n\nexport const XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nexport const XSRF_COOKIE_NAME = new InjectionToken<string>('XSRF_COOKIE_NAME', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_COOKIE_NAME,\n});\n\nexport const XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nexport const XSRF_HEADER_NAME = new InjectionToken<string>('XSRF_HEADER_NAME', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_HEADER_NAME,\n});\n\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nexport abstract class HttpXsrfTokenExtractor {\n  /**\n   * Get the XSRF token to use with an outgoing request.\n   *\n   * Will be called for every request, so the token may change between requests.\n   */\n  abstract getToken(): string|null;\n}\n\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\n@Injectable()\nexport class HttpXsrfCookieExtractor implements HttpXsrfTokenExtractor {\n  private lastCookieString: string = '';\n  private lastToken: string|null = null;\n\n  /**\n   * @internal for testing\n   */\n  parseCount: number = 0;\n\n  constructor(\n      @Inject(DOCUMENT) private doc: any, @Inject(PLATFORM_ID) private platform: string,\n      @Inject(XSRF_COOKIE_NAME) private cookieName: string) {}\n\n  getToken(): string|null {\n    if (this.platform === 'server') {\n      return null;\n    }\n    const cookieString = this.doc.cookie || '';\n    if (cookieString !== this.lastCookieString) {\n      this.parseCount++;\n      this.lastToken = parseCookieValue(cookieString, this.cookieName);\n      this.lastCookieString = cookieString;\n    }\n    return this.lastToken;\n  }\n}\n\nexport function xsrfInterceptorFn(\n    req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {\n  const lcUrl = req.url.toLowerCase();\n  // Skip both non-mutating requests and absolute URLs.\n  // Non-mutating requests don't require a token, and absolute URLs require special handling\n  // anyway as the cookie set\n  // on our origin is not the same as the token expected by another origin.\n  if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' ||\n      lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n    return next(req);\n  }\n\n  const token = inject(HttpXsrfTokenExtractor).getToken();\n  const headerName = inject(XSRF_HEADER_NAME);\n\n  // Be careful not to overwrite an existing header of the same name.\n  if (token != null && !req.headers.has(headerName)) {\n    req = req.clone({headers: req.headers.set(headerName, token)});\n  }\n  return next(req);\n}\n\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\n@Injectable()\nexport class HttpXsrfInterceptor implements HttpInterceptor {\n  constructor(private injector: EnvironmentInjector) {}\n\n  intercept(initialRequest: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return this.injector.runInContext(\n        () =>\n            xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EnvironmentProviders, inject, InjectionToken, makeEnvironmentProviders, Provider} from '@angular/core';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpClient} from './client';\nimport {HTTP_INTERCEPTOR_FNS, HttpInterceptorFn, HttpInterceptorHandler, legacyInterceptorFnFactory} from './interceptor';\nimport {jsonpCallbackContext, JsonpCallbackContext, JsonpClientBackend, jsonpInterceptorFn} from './jsonp';\nimport {HttpXhrBackend} from './xhr';\nimport {HttpXsrfCookieExtractor, HttpXsrfTokenExtractor, XSRF_COOKIE_NAME, XSRF_ENABLED, XSRF_HEADER_NAME, xsrfInterceptorFn} from './xsrf';\n\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nexport enum HttpFeatureKind {\n  Interceptors,\n  LegacyInterceptors,\n  CustomXsrfConfiguration,\n  NoXsrfProtection,\n  JsonpSupport,\n  RequestsMadeViaParent,\n}\n\n/**\n * A feature for use when configuring `provideHttpClient`.\n *\n * @publicApi\n */\nexport interface HttpFeature<KindT extends HttpFeatureKind> {\n  ɵkind: KindT;\n  ɵproviders: Provider[];\n}\n\nfunction makeHttpFeature<KindT extends HttpFeatureKind>(\n    kind: KindT, providers: Provider[]): HttpFeature<KindT> {\n  return {\n    ɵkind: kind,\n    ɵproviders: providers,\n  };\n}\n\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * @see withInterceptors\n * @see withInterceptorsFromDi\n * @see withXsrfConfiguration\n * @see withNoXsrfProtection\n * @see withJsonpSupport\n * @see withRequestsMadeViaParent\n */\nexport function provideHttpClient(...features: HttpFeature<HttpFeatureKind>[]):\n    EnvironmentProviders {\n  if (ngDevMode) {\n    const featureKinds = new Set(features.map(f => f.ɵkind));\n    if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) &&\n        featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n      throw new Error(\n          ngDevMode ?\n              `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` :\n              '');\n    }\n  }\n\n  const providers: Provider[] = [\n    HttpClient,\n    HttpXhrBackend,\n    HttpInterceptorHandler,\n    {provide: HttpHandler, useExisting: HttpInterceptorHandler},\n    {provide: HttpBackend, useExisting: HttpXhrBackend},\n    {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: xsrfInterceptorFn,\n      multi: true,\n    },\n    {provide: XSRF_ENABLED, useValue: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n  ];\n\n  for (const feature of features) {\n    providers.push(...feature.ɵproviders);\n  }\n\n  return makeEnvironmentProviders(providers);\n}\n\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see HttpInterceptorFn\n * @see provideHttpClient\n * @publicApi\n */\nexport function withInterceptors(interceptorFns: HttpInterceptorFn[]):\n    HttpFeature<HttpFeatureKind.Interceptors> {\n  return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {\n    return {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: interceptorFn,\n      multi: true,\n    };\n  }));\n}\n\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken<HttpInterceptorFn>('LEGACY_INTERCEPTOR_FN');\n\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see HttpInterceptor\n * @see HTTP_INTERCEPTORS\n * @see provideHttpClient\n */\nexport function withInterceptorsFromDi(): HttpFeature<HttpFeatureKind.LegacyInterceptors> {\n  // Note: the legacy interceptor function is provided here via an intermediate token\n  // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n  // included multiple times, all of the multi-provider entries will have the same instance of the\n  // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n  // interceptors will not run multiple times.\n  return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [\n    {\n      provide: LEGACY_INTERCEPTOR_FN,\n      useFactory: legacyInterceptorFnFactory,\n    },\n    {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useExisting: LEGACY_INTERCEPTOR_FN,\n      multi: true,\n    }\n  ]);\n}\n\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see provideHttpClient\n */\nexport function withXsrfConfiguration(\n    {cookieName, headerName}: {cookieName?: string, headerName?: string}):\n    HttpFeature<HttpFeatureKind.CustomXsrfConfiguration> {\n  const providers: Provider[] = [];\n  if (cookieName !== undefined) {\n    providers.push({provide: XSRF_COOKIE_NAME, useValue: cookieName});\n  }\n  if (headerName !== undefined) {\n    providers.push({provide: XSRF_HEADER_NAME, useValue: headerName});\n  }\n\n  return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see provideHttpClient\n */\nexport function withNoXsrfProtection(): HttpFeature<HttpFeatureKind.NoXsrfProtection> {\n  return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [\n    {\n      provide: XSRF_ENABLED,\n      useValue: false,\n    },\n  ]);\n}\n\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see provideHttpClient\n */\nexport function withJsonpSupport(): HttpFeature<HttpFeatureKind.JsonpSupport> {\n  return makeHttpFeature(HttpFeatureKind.JsonpSupport, [\n    JsonpClientBackend,\n    {provide: JsonpCallbackContext, useFactory: jsonpCallbackContext},\n    {provide: HTTP_INTERCEPTOR_FNS, useValue: jsonpInterceptorFn, multi: true},\n  ]);\n}\n\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see provideHttpClient\n * @developerPreview\n */\nexport function withRequestsMadeViaParent(): HttpFeature<HttpFeatureKind.RequestsMadeViaParent> {\n  return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [\n    {\n      provide: HttpBackend,\n      useFactory: () => {\n        const handlerFromParent = inject(HttpHandler, {skipSelf: true, optional: true});\n        if (ngDevMode && handlerFromParent === null) {\n          throw new Error(\n              'withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n        }\n        return handlerFromParent;\n      },\n    },\n  ]);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {HTTP_INTERCEPTORS} from './interceptor';\nimport {provideHttpClient, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withXsrfConfiguration} from './provider';\nimport {HttpXsrfCookieExtractor, HttpXsrfInterceptor, HttpXsrfTokenExtractor, XSRF_DEFAULT_COOKIE_NAME, XSRF_DEFAULT_HEADER_NAME, XSRF_ENABLED} from './xsrf';\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    HttpXsrfInterceptor,\n    {provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n    withXsrfConfiguration({\n      cookieName: XSRF_DEFAULT_COOKIE_NAME,\n      headerName: XSRF_DEFAULT_HEADER_NAME,\n    }).ɵproviders,\n    {provide: XSRF_ENABLED, useValue: true},\n  ],\n})\nexport class HttpClientXsrfModule {\n  /**\n   * Disable the default XSRF protection.\n   */\n  static disable(): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [\n        withNoXsrfProtection().ɵproviders,\n      ],\n    };\n  }\n\n  /**\n   * Configure XSRF protection.\n   * @param options An object that can specify either or both\n   * cookie name or header name.\n   * - Cookie name default is `XSRF-TOKEN`.\n   * - Header name default is `X-XSRF-TOKEN`.\n   *\n   */\n  static withOptions(options: {\n    cookieName?: string,\n    headerName?: string,\n  } = {}): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: withXsrfConfiguration(options).ɵproviders,\n    };\n  }\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n@NgModule({\n  /**\n   * Configures the [dependency injector](guide/glossary#injector) where it is imported\n   * with supporting services for HTTP communications.\n   */\n  providers: [\n    provideHttpClient(\n        withInterceptorsFromDi(),\n        withXsrfConfiguration({\n          cookieName: XSRF_DEFAULT_COOKIE_NAME,\n          headerName: XSRF_DEFAULT_HEADER_NAME,\n        }),\n        ),\n  ],\n})\nexport class HttpClientModule {\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    withJsonpSupport().ɵproviders,\n  ],\n})\nexport class HttpClientJsonpModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {XhrFactory as XhrFactory_fromAngularCommon} from '@angular/common';\n\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\nexport type XhrFactory = XhrFactory_fromAngularCommon;\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\nexport const XhrFactory = XhrFactory_fromAngularCommon;\n\nexport {HttpBackend, HttpHandler} from './src/backend';\nexport {HttpClient} from './src/client';\nexport {HttpContext, HttpContextToken} from './src/context';\nexport {HttpHeaders} from './src/headers';\nexport {HTTP_INTERCEPTORS, HttpInterceptor, HttpInterceptorHandler as ɵHttpInterceptorHandler, HttpInterceptorFn, HttpHandlerFn} from './src/interceptor';\nexport {JsonpClientBackend, JsonpInterceptor} from './src/jsonp';\nexport {HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule} from './src/module';\nexport {HttpParameterCodec, HttpParams, HttpParamsOptions, HttpUrlEncodingCodec} from './src/params';\nexport {HttpFeature, HttpFeatureKind, provideHttpClient, withJsonpSupport, withNoXsrfProtection, withXsrfConfiguration, withInterceptors, withInterceptorsFromDi, withRequestsMadeViaParent} from './src/provider';\nexport {HttpRequest} from './src/request';\nexport {HttpDownloadProgressEvent, HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaderResponse, HttpProgressEvent, HttpResponse, HttpResponseBase, HttpSentEvent, HttpStatusCode, HttpUploadProgressEvent, HttpUserEvent} from './src/response';\nexport {HttpXhrBackend} from './src/xhr';\nexport {HttpXsrfTokenExtractor} from './src/xsrf';\n\n// This re-export exists because g3 depends on this old private name.\nexport {HttpInterceptorHandler as ɵHttpInterceptingHandler} from './src/interceptor';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["popScheduler","from","of","args","scheduler","mergeMap","isFunction","concatMap","project","resultSelector","operate","createOperatorSubscriber","filter","predicate","thisArg","source","subscriber","index","subscribe","value","call","next","innerFrom","executeSchedule","mergeInternals","concurrent","onBeforeNext","expand","innerSubScheduler","additionalFinalizer","buffer","active","isComplete","checkComplete","length","complete","outerNext","doInnerSub","push","innerComplete","innerValue","undefined","bufferedValue","shift","err","error","map","Infinity","a","i","b","ii","isScheduler","last","arr","popResultSelector","pop","popNumber","defaultValue","HttpHandler","HttpBackend","HttpHeaders","constructor","headers","Map","lazyInit","split","forEach","line","indexOf","name","slice","key","toLowerCase","trim","maybeSetNormalizedName","has","get","set","ngDevMode","assertValidHeaders","Object","keys","values","init","Array","normalizedNames","getAll","append","clone","op","delete","lcName","copyFrom","lazyUpdate","update","applyUpdate","other","concat","base","toDelete","existing","fn","entries","isArray","Error","HttpUrlEncodingCodec","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","paramParser","rawParams","codec","params","replace","param","eqIdx","val","list","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","v","encodeURIComponent","s","t","valueToString","HttpParams","options","encoder","fromString","fromObject","res","appendAll","updates","_value","toString","eKey","join","cloneFrom","idx","splice","HttpContextToken","HttpContext","token","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","isUrlSearchParams","URLSearchParams","HttpRequest","url","third","fourth","toUpperCase","body","reportProgress","withCredentials","responseType","context","urlWithParams","qIdx","sep","serializeBody","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","addBody","observe","HttpClient","handler","request","first","req","events$","pipe","handle","res$","event","head","jsonp","callbackParam","patch","post","put","i1.HttpHandler","Injectable","interceptorChainEndFn","finalHandlerFn","adaptLegacyInterceptorToChain","chainTailFn","interceptor","initialRequest","intercept","downstreamRequest","chainedInterceptorFn","interceptorFn","injector","runInContext","HTTP_INTERCEPTORS","InjectionToken","HTTP_INTERCEPTOR_FNS","legacyInterceptorFnFactory","chain","interceptors","inject","optional","reduceRight","HttpInterceptorHandler","backend","dedupedInterceptorFns","Set","nextSequencedFn","nextRequestId","foreignDocument","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JSONP_ERR_HEADERS_NOT_SUPPORTED","JsonpCallbackContext","jsonpCallbackContext","window","JsonpClientBackend","document","callbackMap","Promise","resolve","nextCallback","Observable","observer","callback","node","createElement","src","finished","data","cleanup","parentNode","removeChild","onLoad","resolvedPromise","then","onError","addEventListener","appendChild","Sent","removeListeners","script","implementation","createHTMLDocument","adoptNode","Inject","DOCUMENT","JsonpInterceptor","jsonpInterceptorFn","i0","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","HttpXhrBackend","xhrFactory","build","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","removeEventListener","readyState","DONE","abort","i1","XSRF_ENABLED","XSRF_DEFAULT_COOKIE_NAME","XSRF_COOKIE_NAME","providedIn","factory","XSRF_DEFAULT_HEADER_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","getToken","cookieString","cookie","lastCookieString","parseCount","lastToken","parseCookieValue","PLATFORM_ID","lcUrl","startsWith","headerName","HttpXsrfInterceptor","xsrfInterceptorFn","HttpFeatureKind","makeHttpFeature","kind","providers","ɵkind","ɵproviders","features","featureKinds","f","NoXsrfProtection","CustomXsrfConfiguration","provide","useExisting","useValue","multi","useClass","feature","makeEnvironmentProviders","withInterceptors","interceptorFns","Interceptors","LEGACY_INTERCEPTOR_FN","withInterceptorsFromDi","LegacyInterceptors","useFactory","withXsrfConfiguration","withNoXsrfProtection","withJsonpSupport","JsonpSupport","withRequestsMadeViaParent","RequestsMadeViaParent","handlerFromParent","skipSelf","HttpClientXsrfModule","disable","ngModule","withOptions","NgModule","HttpClientModule","provideHttpClient","HttpClientJsonpModule","XhrFactory","XhrFactory_fromAngularCommon"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2,3,4,5]}